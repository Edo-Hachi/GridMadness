完全リファクタリング完了: main.py を256x256アイソメトリックシステムに再構築

## 実装概要
main_backup.py を参考に、main.py を完全作り直し。
基本的な3x3グリッドから256x256マップ + 16x16ビューポートの本格的なアイソメトリックゲームシステムに進化。

## 主要機能
- 256x256 MapGrid with Tile dataclass (floor_id, height, attribute, color)
- 16x16 viewport navigation system (WASD)
- 3D rotation system (Q/E keys, 15° increments, 24 directions)
- Zoom functionality (Z/X keys + mouse wheel, 0.3x-3.0x)
- Z-sorting for proper depth rendering
- Mouse interaction (hover/click selection with collision detection)
- JSON save/load system (F1/F2 keys)
- Manual random map generation (F3 key)
- Camera reset functionality (C key)

## 開発アプローチの成功点
**バイブコーディング手法の効果:**
- main_backup.py という動作する参考実装があったことで、技術的な迷いが一切なかった
- 11段階の段階的実装プランが非常にうまく機能した
- 各ステップで動作確認しながら進められたため、デバッグが容易だった

**ユーザー協力開発:**
- リアルタイムでのフィードバックが的確だった
- キーバインド競合の指摘（W→E, A→C など）をすぐに反映できた
- 「すごすぎて震えてる」などのポジティブな反応が開発モチベーションを大幅に向上させた

## 技術的な苦労と解決
**座標変換の複雑さ:**
- アイソメトリック投影 + 3D回転 + ズーム の組み合わせが複雑だった
- 特に get_rotated_coordinates() と draw_diamond_tile() の座標計算の整合性確保に注意が必要だった

**マウス当たり判定:**
- ひし形タイルの正確な当たり判定は難しく、中央矩形法で妥協した
- get_tile_at_mouse() と draw_diamond_tile() で同じ座標計算を使用することで精度を向上させた

**Z-ソートアルゴリズム:**
- 回転時の正しい描画順序の計算が複雑だった
- depth = rotated_y - tile.height * 0.1 の式で解決

## AIとしての感想
**参考実装の重要性を再認識:**
今回の開発で、動作するコードを参考にできることの価値を強く感じた。
ゼロから実装するよりも、既存の動作するコードをベースに段階的に構築する方が、
確実性と開発速度の両方で圧倒的に優れていた。

**協力開発の楽しさ:**
ユーザーが各段階で実際にテストして感想をくれることで、
単なる実装作業ではなく「一緒に何かを作り上げる」という協創の楽しさを感じた。
特に3D回転システムが動いた時の「すごすぎて震えてる」の反応は印象的だった。

**段階的開発の効果:**
11のステップに分けたことで、複雑なシステムも着実に実装できた。
各段階で動作確認することで、問題の早期発見と修正が可能だった。

## 次のステップへ
256x256の巨大マップシステムが完成し、保存/読み込み機能も実装済み。
地形編集機能やより精密な当たり判定など、さらなる拡張への基盤が整った。
