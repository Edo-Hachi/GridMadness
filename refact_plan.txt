ゲームシステム上でのアイソメトリック表現をおこなうモックアップシステム（再構築中）

データ配列は256x256の二次元配列で、各要素は高さを表す整数値を保持する

将来的には、地形の属性なども持たせるので、構造体を定義する
{
    string floor_id "xxx_yyy" //マップタイルのID 配列内のx座標 、y座標を元に文字列で構成 [xxx_yyy]
    int Heignth //地形高さ
    int attribute   //地形属性
    int color        //地形色
}

この構造体(class)を二次元配列で保持する

floor_idはデータベースキーとして利用し、将来的に地形の属性情報を紐づける


画面上にはこれらの256x256のタイルから16x16サイズをピックアップし、画面上には 16x16サイズを表示する
アイソメトリックマップはZソートを用いて、奥側から手前に向かって表示を行う @main_backup/py を参考に

    def get_tile_depth(self, grid_x, grid_y):
        """Zソート用にタイルの描画順を決めるための深度値を計算する."""
        rotated_x, rotated_y = self.get_rotated_coordinates(grid_x, grid_y)
        tile = self.fieldgrid[grid_y][grid_x]
        
        # 深度 = 回転後のY座標 + 高さ（後ろにあるものほど先に描画）
        depth = rotated_y - tile.height * 0.1
        return depth


#試験データとしてランダムに256x256の二次元配列を生成する機能をデバッグ実装する（表示試験用）
このモックアップをベースに、将来的には地形編集機能を作成する。
データの保存は、jsonファイルに保存するよてい。


###追加
256ｘ256の二次元配列の中をWASDにて移動していくことができる。256ｘ256の配列端を越えて移動することはできない。


#-----
画面に表示しているアイソメトリックマップは  @main_backup/py を参考に、前後左右スクロール、ズームアップ、ズームダウンし、回転表示を行うことができる


        # -------------------------
        # 回転システム
        # -------------------------
        # 1ステップあたりの回転角度
        self.rotation_step = 15
        # 現在の回転ステップ番号
        self.rotation_index = 0
        # 0〜self.max_rotations-1 までの値を取る
        self.max_rotations = 360 // self.rotation_step


        # 回転処理
        if pyxel.btnp(pyxel.KEY_Q):  # btnp = 押した瞬間のみ
            self.rotation_index = (self.rotation_index - 1) % self.max_rotations
        if pyxel.btnp(pyxel.KEY_W):
            self.rotation_index = (self.rotation_index + 1) % self.max_rotations

#-----

画面に表示しているアイソメトリックマップは  @main_backup/py を参考に、ズームアップ、ズームダウンし、表示を行うことができる
        # ズーム処理
        if pyxel.btn(pyxel.KEY_Z):
            self.zoom += 0.1
            if self.zoom > 3.0:  # 最大3倍まで
                self.zoom = 3.0
        if pyxel.btn(pyxel.KEY_X):
            self.zoom -= 0.1
            if self.zoom < 0.3:  # 最小0.3倍まで
                self.zoom = 0.3


    def current_angle(self):
        """現在の回転角度(度)を返す."""
        return self.rotation_index * self.rotation_step
    
    def get_rotated_coordinates(self, grid_x, grid_y):
        """現在の回転角度を用いてグリッド座標を回転させる."""
        angle_rad = math.radians(self.current_angle)
        
        # グリッド中心からの相対座標
        center = GRID_SIZE // 2
        rel_x = grid_x - center
        rel_y = grid_y - center
        
        # 回転変換
        rotated_x = rel_x * math.cos(angle_rad) - rel_y * math.sin(angle_rad)
        rotated_y = rel_x * math.sin(angle_rad) + rel_y * math.cos(angle_rad)
        
        return rotated_x, rotated_y

#VIEWリセット機能を実装しており
「A」キーを押すことで、16x16のビューポートを画面中央、回転リセット、ズームリセットして表示することができる　

#ユーザーインターフェースとしてはマウスカーソル、マウスL,Rボタンに対応し、
フロアパネルの選択を可能とする（マウスLボタン押下で選択）
マウスホイールによるズームアップ、ズームダウンに対応する

